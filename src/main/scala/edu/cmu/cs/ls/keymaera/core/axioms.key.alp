/*
 * KeYmaera Axioms
 * @author Nathan Fulton
 * @author Jan-David Quesel
 * @author Andre Platzer
 * 
 * Basic dL Axioms of Differential Dynamic Logic.
 * @see "Andre Platzer. The complete proof theory of hybrid systems. ACM/IEEE Symposium on Logic in Computer Science, LICS 2012, June 25â€“28, 2012, Dubrovnik, Croatia, pages 541-550. IEEE 2012."
 * @see "Andre Platzer. Dynamic logics of dynamical systems. arXiv 1205.4788, May 2012."
 */
Variables.
  T s.
  T t.
  P a.
  P b.
  F p.
  F q.
  F H.
End.

/* @TODO check and possibly usage in the end is Hoare style */

Axiom "[:=] assignment".
  [x:=t]p(x) <-> p(t)
End.

Axiom "<:=> assignment".
  <x:=t>p(x) <-> p(t)
End.

Axiom "[:*] assignment".
  [x:=*]p(x) <-> \forall x. p(x)
End.

Axiom "<:*> assignment".
  <x:=*>p(x) <-> \exists x. p(x)
End.

Axiom "[?] test".
  [?H]p <-> (H -> p).
End.

Axiom "<?> test".
  <?H>p <-> (H & p).
End.

Axiom "[++] choice".
  [a ++ b]p <-> ([a]p & [b]p).
End.

Axiom "<++> choice".
   <a ++ b>p <-> (<a>p | <b>p).
End.

Axiom "[;] compose".
  [ a; b ]p <-> [a][b]p.
End.

Axiom "<;> compose".
  < a; b >p <-> <a><b>p.
End.

Axiom "[*] unwind".
  [a*]p <-> (p & [a][a*] p).
End.

Axiom "<*> unwind".
  <a*>p <-> (p | <a><a*> p).
End.

Axiom "K modal modus ponens".
  [a](p->q) -> (([a]p) -> ([a]q))
End.

Axiom "I induction".
  (p & [a*](p -> [a] p)) -> [a*]p
End.

Axiom "B- converse Barcan".
  ([a] \forall x. p(x)) -> \forall x. [a] p(x)
End.

Axiom "Quantifier Instantiation".
  \forall x. p(x) -> p(t)
End.

/* @TODO ap: corrected parentheses
// \forall {a} quantifies over all variables written in a
// not sure if this can be an axiom or needs to be a built-in rule
// since it's hard to get this working with uniform substitution
Axiom "Generalize".
  (\forall {a}. p) -> ([a] p)
End.
*/

/*
Axiom "Forall-Quantifier Scope".
  (\forall x. (p(x) & q)) <-> ((\forall x. p(x)) & q)
End.
*/

/* @TODO does this parse?
   @TODO How to deal with unchanged variables and systems?
Axiom "DI differential invariant".
   @TODO check
  [x'=t&H]p <- ([x'=t&H](H->[x':=t](p')))
End.
*/

/* syntactic total derivation of formulas */

Axiom "&' derive and".
  (p & q)' <-> ((p') & (q'))
End.

Axiom "|' derive or".
  (p | q)' <-> ((p') & (q'))
End.

Axiom "=' derive =".
  (s = t)' <-> ((s') = (t'))
End.

Axiom ">=' derive >=".
  (s >= t)' <-> ((s') >= (t'))
End.

Axiom ">' derive >".
  (s > t)' <-> ((s') >= (t'))
End.

Axiom "<=' derive <=".
  (s <= t)' <-> ((s') <= (t'))
End.

Axiom "<' derive <".
  (s < t)' <-> ((s') <= (t'))
End.

Axiom "!=' derive !=".
  (s != t)' <-> ((s') = (t'))
End.

/* syntactic total derivation of terms */

Axiom "+' derive sum".
  (s + t)' = (s') + (t')
End.

Axiom "-' derive minus".
  (s - t)' = (s') - (t')
End.

Axiom "*' derive product".
  (s * t)' = ((s')*t) + (s*(t'))
End.

Axiom "/' derive quotient".
  (s / t)' = (((s')*t) - (s*(t'))) / (t^2)
End.

/* @TODO
Axiom "Derive Monomial".
	(x^n)' = n*x^(n-1)
End.
*/
