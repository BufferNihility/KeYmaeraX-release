/**
 * KeYmaera Axioms
 *
 * @author Nathan Fulton
 * @author Stefan Mitsch
 * @author Jan-David Quesel
 * @author Andre Platzer
 * 
 * Basic dL Axioms of Differential Dynamic Logic.
 * @see "Andre Platzer. The complete proof theory of hybrid systems. ACM/IEEE Symposium on Logic in Computer Science, LICS 2012, June 25–28, 2012, Dubrovnik, Croatia, pages 541-550. IEEE 2012."
 * @see "Andre Platzer. Dynamic logics of dynamical systems. arXiv 1205.4788, May 2012."
 * @see "Andre Platzer. Differential Game Logic. arXiv 1408.1980, August 2014."
 */
Variables.
  T s.
  T s().
  T t.
  T t().
  T x.
  T v. /* TODO-nrf this needs to be a V */
  T f(T).
  T g(T).
  P a.
  P b.
  CP c.
  F p.
  F p(T).
  F p(?).
  F q.
  F q(T).
  F H.
  F H(T).
  /* for arithmetic axioms */
  /* T r.
   * T Abs(T).
   * T Max(T, T).
   * T Min(T, T).*/
End.

Axiom "all instantiate".
  \forall x. p(x) -> p(t())
End.

Axiom "exists generalize".
  p(t()) -> \exists x. p(x)
End.

Axiom "vacuous exists quantifier".
  p <-> \exists x. p
End.

Axiom "vacuous all quantifier".
  p <-> \forall x. p
End.

/*
Axiom "all quantifier scope".
  (\forall x. (p(x) & q)) <-> ((\forall x. p(x)) & q)
End.
*/

/**
 * Hybrid Program Modalities
 */

Axiom "[:=] assign".
  [v:=t();]p(v) <-> p(t())
End.

Axiom "<:=> assign".
  <v:=t();>p(v) <-> p(t())
End.

Axiom "[:=] assign equational".
  [v:=t();]p(v) <-> \forall v . (v=t() -> p(v))
End.

Axiom "[:=] vacuous assign".
  [v:=t();]p <-> p
End.

Axiom "<:=> vacuous assign".
  <v:=t();>p <-> p
End.

Axiom "[':=] differential assign".
  [v':=t();]p(v') <-> p(t())
End.

Axiom "<':=> differential assign".
  <v':=t();>p(v') <-> p(t())
End.

/*
 * @TODO AP: Soundness questionable. Replaced.
Axiom "[':=] differential assign equational".
  [v':=t;]p(v') <-> \forall v . (v'=t -> p(v'))
End.
*/

Axiom "[:*] assign nondet".
  [v:=*;]p(v) <-> \forall v. p(v)
End.

Axiom "<:*> assign nondet".
  <v:=*;>p(v) <-> \exists v. p(v)
End.

Axiom "[?] test".
  [?H;]p <-> (H -> p).
End.

Axiom "<?> test".
  <?H;>p <-> (H & p).
End.

Axiom "[++] choice".
  [a ++ b]p(?) <-> ([a;]p(?) & [b;]p(?)).
End.

/*
Axiom "<++> choice".
   <a ++ b>p(?) <-> (<a;>p(?) | <b;>p(?)).
End.
*/

Axiom "[;] compose".
  [ a; b; ]p(?) <-> [a;][b;]p(?).
End.

Axiom "<;> compose".
  < a; b; >p(?) <-> <a;><b;>p(?).
End.

Axiom "[*] iterate".
  [a*]p(?) <-> (p(?) & [a;][a*] p(?)).
End.

Axiom "<*> iterate".
  <a*>p(?) <-> (p(?) | <a;><a*> p(?)).
End.

/* @TODO unsound if x in a
Axiom "B- converse Barcan".
  ([a;] \forall x. p(x)) -> \forall x. [a;] p(x)
End.
*/

/* @NOTE Unsound for games */
Axiom "B Barcan".
  \forall x. [a;] p(x) -> ([a;] \forall x. p(x))
End.

/* @TODO ap: corrected parentheses
// \forall {a} quantifies over all variables written in a
// not sure if this can be an axiom or needs to be a built-in rule
// since it's hard to get this working with uniform substitution
Axiom "QuantifierAbstraction".
  (\forall {a}. p) -> ([a] p)
End.
Axiom "QuantifierAbstraction".
  \forall x . p(x) -> [a(x)]p(x)
End.
*/


/* @NOTE Unsound for games */
Axiom "K modal modus ponens".
  [a;](p(?)->q(?)) -> (([a;]p(?)) -> ([a;]q(?)))
End.

/* TODO double check with axiom sheet */
Axiom "I induction".
  (p(?) & [a*](p(?) -> [a;] p(?))) -> [a*]p(?)
End.

/*@TODO Convergence axiom*/

/**
 * DIFFERENTIAL INVARIANTS
 */

Axiom "DW differential weakening".
  [x'=f(x)&H(x);]p(x) <- ([x'=f(x)&H(x);](H(x)->p(x)))
End.

/* @TODO How to deal with unchanged variables and systems? */
Axiom "DI differential invariant".
  [x'=f(x)&H(x);]p(x) <- ((H(x)->p(x)) & ([x'=f(x)&H(x);][x':=f(x);](p(x)')))
End.

Axiom "DC differential cut".
  [x'=f(x)&H(x);]p(x) <- ([x'=f(x)&H(x);]q(x) & [x'=f(x)&(H(x)&q(x));]p(x))
End.


/* diff. weaken of differential equation system */
Axiom "DW differential weaken system introduce".
  [c;]p(?) <- [$$c$$;]p(?)
End.
Axiom "DW differential weaken system head".
  [$$x'=f(?)&H(?),c$$;]p(?) <- [x:=*;][$$c$$;][?H(?);]p(?)
End.
Axiom "DW differential weaken system nil".
  [$$$$;][?H;]p <- [?H;]p
End.

/* Differential Auxiliary / Differential Ghost */
Axiom "DA differential ghost".
  [c;]p(?) <- ((p(?) <-> \exists x. q(?)) & [c,x'=t()*x+s();]q(?))
End.

/* Differential Invariant for Systems of Differential Equations */
Axiom "DI System Marker Intro".
  [c;]p(?) <- (p(?) & [$$c$$;]p(?)')
End.

Axiom "DI System Head Test".
    [$$x'=f(?) & H(?), c$$;]p(?) <- [$$c, x' ≚ f(?) & H(?)$$;][x' := f(?);](H(?) -> p(?))
End.

Axiom "DI System Complete".
    ([$$x' ≚ f(?) & H(?), c$$;]p(?)) <- p(?)
End.

/* @todo added and probably not nec. */
Axiom "->' derive imply".
  (p -> q)' <-> (!p | q)'
End.

Axiom "&' derive and".
  (p & q)' <-> ((p') & (q'))
End.

Axiom "|' derive or".
  (p | q)' <-> ((p') & (q'))
  /* sic! */
End.

Axiom "=' derive =".
  (f(?) = g(?))' <-> ((f(?)') = (g(?)'))
End.

Axiom ">=' derive >=".
  (f(?) >= g(?))' <-> ((f(?)') >= (g(?)'))
End.

Axiom ">' derive >".
  (f(?) > g(?))' <-> ((f(?)') >= (g(?)'))
  /* sic! easier */
End.

Axiom "<=' derive <=".
  (f(?) <= g(?))' <-> ((f(?)') <= (g(?)'))
End.

Axiom "<' derive <".
  (f(?) < g(?))' <-> ((f(?)') <= (g(?)'))
  /* sic! easier */
End.

Axiom "!=' derive !=".
  (f(?) != g(?))' <-> ((f(?)') = (g(?)'))
  /* sic! */
End.

/* syntactic total derivation of terms */

Axiom "-' derive neg".
  (-f(?))' = -(f(?)')
End.

Axiom "+' derive sum".
  (f(?) + g(?))' = (f(?)') + (g(?)')
End.

Axiom "-' derive minus".
  (f(?) - g(?))' = (f(?)') - (g(?)')
End.

Axiom "*' derive product".
  (f(?) * g(?))' = ((f(?)')*g(?)) + (f(?)*(g(?)'))
End.

Axiom "/' derive quotient".
  (f(?) / g(?))' = (((f(?)')*g(?)) - (f(?)*(g(?)'))) / (g(?)^2)
End.

/*
Axiom "chain rule".
	p((f(g(x)))') <-> \forall u. (u = g(x) -> p((g(x))'*(f(u))'))
End.
*/

/* @TODO
Axiom "Derive Monomial".
	(x^n)' = n*x^(n-1)
End.
*/


/**
 * Real arithmetic
 */

/* Unused so far
Axiom "+ associative".
  (r + s) + t = r + (s + t)
End.

Axiom "* associative".
  (r * s) * t = r * (s * t)
End.

Axiom "+ commutative".
  s+t = t+s
End.

Axiom "* commutative".
  s*t = t*s
End.

Axiom "distributive".
  r*(s+t) = r*s + r*t
End.

Axiom "+ identity".
  s + 0 = s
End.

Axiom "* identity".
  s * 1 = s
End.

Axiom "+ inverse".
  s + (-s) = 0
End.

Axiom "* inverse".
  s != 0 -> s * (s^-1) = 1
End.

Axiom "positivity".
  0 < s | 0 = s | 0 < -s
End.

Axiom "+ closed".
  (0 < s & 0 < t) -> 0 < s+t
End.

Axiom "* closed".
  (0 < s & 0 < t) -> 0 < s*t
End.

Axiom "<".
  s<t <-> 0 < t-s
End.

Axiom ">".
  s>t <-> t<s
End.
*/

Axiom "<=".
  f(?)<=g(?) <-> (f(?)<g(?) | f(?)=g(?))
End.

Axiom ">=".
  f(?)>=g(?) <-> (f(?)>g(?) | f(?)=g(?))
End.

Axiom "= negate".
  f(?) = g(?) <-> !(f(?) != g(?))
End.

Axiom "< negate".
  f(?) < g(?) <-> !(f(?) >= g(?))
End.

/* Unused so far
Axiom "abs expand".
  Abs(s) = if (s < 0) then -s else s fi
End.
*/
/* Multi-argument don't parse
Axiom "max expand".
  Max(s, t) = if (s > t) then s else t fi
End.

Axiom "min expand".
  Min(s, t) = if (s < t) then s else t fi
End.
*/