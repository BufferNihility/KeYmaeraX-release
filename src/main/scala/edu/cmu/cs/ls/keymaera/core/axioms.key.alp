/**
 * KeYmaera Axioms
 *
 * @author Nathan Fulton
 * @author Stefan Mitsch
 * @author Jan-David Quesel
 * @author Andre Platzer
 * 
 * Basic dL Axioms of Differential Dynamic Logic.
 * @see "Andre Platzer. The complete proof theory of hybrid systems. ACM/IEEE Symposium on Logic in Computer Science, LICS 2012, June 25â€“28, 2012, Dubrovnik, Croatia, pages 541-550. IEEE 2012."
 * @see "Andre Platzer. Dynamic logics of dynamical systems. arXiv 1205.4788, May 2012."
 * @see "Andre Platzer. Differential Game Logic. arXiv 1408.1980, August 2014."
 */
Variables.
  T s.
  T t.
  T x.
  T v. /* TODO-nrf this needs to be a V */
  T f(T).
  T g(T).
  P a.
  P b.
  CP c.
  F p.
  F p(T).
  F q.
  F q(T).
  F H.
  F H(T).
End.

Axiom "all instantiate".
  \forall x. p(x) -> p(t)
End.

Axiom "exists generalize".
  p(t) -> \exists x. p(x)
End.

Axiom "vacuous exists quantifier".
  p <-> \exists x. p
End.

Axiom "vacuous all quantifier".
  p <-> \forall x. p
End.

/*
Axiom "all quantifier scope".
  (\forall x. (p(x) & q)) <-> ((\forall x. p(x)) & q)
End.
*/

/**
 * Hybrid Program Modalities
 */

Axiom "[:=] assign".
  [v:=t;]p(v) <-> p(t)
End.

Axiom "<:=> assign".
  <v:=t;>p(v) <-> p(t)
End.

Axiom "[:=] assign equational".
  [v:=t;]p(v) <-> \forall v . (v=t -> p(v))
End.

Axiom "[:=] vacuous assign".
  [v:=t;]p <-> p
End.

Axiom "<:=> vacuous assign".
  <v:=t;>p <-> p
End.

Axiom "[':=] differential assign equational".
  [v':=t;]p(v) <-> \forall v . (v'=t -> p(v))
End.

Axiom "[:*] assign nondet".
  [v:=*;]p(v) <-> \forall v. p(v)
End.

Axiom "<:*> assign nondet".
  <v:=*;>p(v) <-> \exists v. p(v)
End.

Axiom "[?] test".
  [?H;]p <-> (H -> p).
End.

Axiom "<?> test".
  <?H;>p <-> (H & p).
End.

Axiom "[++] choice".
  [a ++ b]p <-> ([a;]p & [b;]p).
End.

/*
Axiom "<++> choice".
   <a ++ b>p <-> (<a;>p | <b;>p).
End.
*/

Axiom "[;] compose".
  [ a; b; ]p <-> [a;][b;]p.
End.

Axiom "<;> compose".
  < a; b; >p <-> <a;><b;>p.
End.

Axiom "[*] iterate".
  [a*]p <-> (p & [a;][a*] p).
End.

Axiom "<*> iterate".
  <a*>p <-> (p | <a;><a*> p).
End.

Axiom "B- converse Barcan".
  ([a;] \forall x. p(x)) -> \forall x. [a;] p(x)
End.

/* @TODO ap: corrected parentheses
// \forall {a} quantifies over all variables written in a
// not sure if this can be an axiom or needs to be a built-in rule
// since it's hard to get this working with uniform substitution
Axiom "QuantifierAbstraction".
  (\forall {a}. p) -> ([a] p)
End.
Axiom "QuantifierAbstraction".
  \forall x . p(x) -> [a(x)]p(x)
End.
*/


Axiom "K modal modus ponens".
  [a;](p->q) -> (([a;]p) -> ([a;]q))
End.

Axiom "I induction".
  (p & [a*](p -> [a;] p)) -> [a*]p
End.

/*@TODO Convergence axiom*/

/**
 * DIFFERENTIAL INVARIANTS
 */

/* @TODO How to deal with unchanged variables and systems? */
Axiom "DI differential invariant".
  [x'=t&H;]p <- ((H->p) & ([x'=t&H;](H->[x':=t;](p'))))
End.

Axiom "DC differential cut".
  [x'=t&H;]p <- ([x'=t&H;]q & [x'=t&(H&q);]p)
End.

/* diff. weaken of differential equation system */
Axiom "DW differential weaken system introduce".
  [c;]p <- [$$c$$;]p
End.
Axiom "DW differential weaken system head".
  [$$x'=f(x)&H(x),c$$;]p(x) <- [x:=*;][$$c$$;][?H(x);]p(x)
End.
Axiom "DW differential weaken system nil".
  [$$$$;][?H;]p <- [?H;]p
End.

/* Differential Auxiliary / Differential Ghost */
Axiom "DA differential ghost".
  [c;]p <- ((p <-> \exists x. q(x)) & [c,x'=t*x+s;]q(x))
End.

/* Differential Invariant for Systems of Differential Equations */
Axiom "DI System Marker Intro".
  [c;]p <- (p & [$$c$$;]p')
End.

Axiom "DI System Head Test".
    [$$x'=f(x) & H(x), c$$;]p(x) <- [$$c, x' =` f(x) & H(x)$$;][x' := f(x);](H(x) -> p(x))
End.

Axiom "DI System Complete".
    [$$x' =` f(x) & H(x), c$$;]p(x) <- p(x)
End.

Axiom "&' derive and".
  (p & q)' <-> ((p') & (q'))
End.

Axiom "|' derive or".
  (p | q)' <-> ((p') & (q'))
  /* sic! */
End.

Axiom "=' derive =".
  (s = t)' <-> ((s') = (t'))
End.

Axiom ">=' derive >=".
  (s >= t)' <-> ((s') >= (t'))
End.

Axiom ">' derive >".
  (s > t)' <-> ((s') >= (t'))
  /* sic! easier */
End.

Axiom "<=' derive <=".
  (s <= t)' <-> ((s') <= (t'))
End.

Axiom "<' derive <".
  (s < t)' <-> ((s') <= (t'))
  /* sic! easier */
End.

Axiom "!=' derive !=".
  (s != t)' <-> ((s') = (t'))
  /* sic! */
End.

/* syntactic total derivation of terms */

Axiom "-' derive neg".
  (-s)' = -(s')
End.

Axiom "+' derive sum".
  (s + t)' = (s') + (t')
End.

Axiom "-' derive minus".
  (s - t)' = (s') - (t')
End.

Axiom "*' derive product".
  (s * t)' = ((s')*t) + (s*(t'))
End.

Axiom "/' derive quotient".
  (s / t)' = (((s')*t) - (s*(t'))) / (t^2)
End.

/*
Axiom "chain rule".
	p((f(g(x)))') <-> \forall u. (u = g(x) -> p((g(x))'*(f(u))'))
End.
*/

/* @TODO
Axiom "Derive Monomial".
	(x^n)' = n*x^(n-1)
End.
*/
