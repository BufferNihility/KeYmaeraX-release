/** Same as nodelay.key with the following differences:
  - Main condition expressed differently as in equivalence3.key:
      (
        \forall R t. \forall R ro. \forall R ho.
        ((0 <= t & t < Max(0, w * (dhf - dhd)) / a &
          ro = rv * t & ho = (w * a) / 2 * t^2 + dhd * t) |
         (t >=  Max(0, w * (dhf - dhd)) / a &
          ro = rv * t & ho = dhf * t - w * Max(0, w * (dhf - dhd))^2 / (2*a))
         -> (Abs(r - ro) > rp | w * h < w * ho - hp))
      )
  - no generalize (not used in the proof anyway)
  - use of (w=1 | w=-1) instead of (w^2 = 1)
*/
/** Condition with Max and Abs
      (
        \forall R t. \forall R ro. \forall R ho.
        ((0 <= t & t < Max(0, w * (dhf - dhd)) / a &
          ro = rv * t & ho = (w * a) / 2 * t^2 + dhd * t) |
         (t >=  Max(0, w * (dhf - dhd)) / a &
          ro = rv * t & ho = dhf * t - w * Max(0, w * (dhf - dhd))^2 / (2*a))
         -> (Abs(r - ro) > rp | w * h < w * ho - hp))
      )
*/

ProgramVariables.
  /** Variables **/
   /* horizontal */
  R r.    /* relative distance in ft; xi - xo */
          /* x = r */
  R rv.   /* relative speed -(vi - vo) */
   /* vertical */
  R h.    /* relative altitude in ft */
          /* if negative: the intruder is lower than the ownship */
          /* h := hi - ho */
          /* z = h */
  R dhd.  /* vertical velocity of ownship */
  R dhf.  /* target minimum velocity */
  R w.    /* velocity bound 1 = lower, -1 = upper */
  R ao.   /* vertical acceleration of ownship */
  /** Constants **/
  R hp.   /* puck height */
  R rp.   /* puck radius */
  R a.    /* minimal vertical acceleration. Typically g/4 */

  R t.
  R ro.
  R ho.
End.

Problem.
  hp > 0 & rp > 0 & rv >= 0 & a > 0 &
  ( (w=-1 | w=1) & 
      (
        \forall t \forall ro \forall ho
        ((0 <= t & t < w * (dhf - dhd) / a & ro = rv * t & ho = (w * a) / 2 * t^2 + dhd * t) |
         (t >=0 & t >= w * (dhf - dhd) / a &
          ro = rv * t &
	  ( (w * (dhf - dhd) <=  0 & ho = dhf * t) |
	    (w * (dhf - dhd) > 0 & ho = dhf * t - w * (w * (dhf - dhd))^2 / (2*a))))
         -> (r - ro < -rp | r - ro > rp | w * h < w * ho - hp))
      ) /* C(w,dhf) */
  )
  -> [
  {   {
      { ?true; ++
        {dhf :=*; {w:=-1; ++ w:=1;}
         ?(
            \forall t \forall ro \forall ho
            ((0 <= t & t < w * (dhf - dhd) / a &
              ro = rv * t & ho = (w * a) / 2 * t^2 + dhd * t) |
             (t >=0 & t >= w * (dhf - dhd) / a &
              ro = rv * t &
        ( (w * (dhf - dhd) <=  0 & ho = dhf * t) |
          (w * (dhf - dhd) > 0 & ho = dhf * t - w * (w * (dhf - dhd))^2 / (2*a))))
             -> (r - ro < -rp | r - ro > rp | w * h < w * ho - hp))
          ); /* C(w,dhf) */
        }}
        ao :=*;
      }
      {r' = -rv, dhd' = ao, h' = -dhd & (w * dhd >= w * dhf | w * ao >= a)}
   }*
  ] ((h < -hp | h > hp | r < -rp | r> rp) &
      (
        \forall t \forall ro \forall ho
        ((0 <= t & t < w * (dhf - dhd) / a &
          ro = rv * t & ho = (w * a) / 2 * t^2 + dhd * t) |
         (t >=0 & t >= w * (dhf - dhd) / a &
          ro = rv * t &
	  ( (w * (dhf - dhd) <=  0 & ho = dhf * t) |
	    (w * (dhf - dhd) > 0 & ho = dhf * t - w * (w * (dhf - dhd))^2 / (2*a))))
         -> (r - ro < -rp | r - ro > rp | w * h < w * ho - hp))
      ) /* C(w,dhf) */
      )
End.

/* Main changes compared to the acas-skeleton:
   - suppression of the Freeaction case
   - no mention of d, dp, dl or t to reduce the number of variables,
     since they are not necessary anymore
   - similarly, no mention of amin, amax and g
   - change of ?(w^2=1) to the more intuitive (w:=1 ++ w:=-1),
     with a generalization to (w^2=1)
   - added loop invariant and generalization
   - added conditions explictly
   - changed dho (initial ownship) to dhd (dh at delay d), that's how it
     is in the conditions
   - also suppression of dho and dhi that don't appear anywhere
   - added w in the condition of the ODE
   - suppressed the condition that r >= -rp
   - suppressed precondition (Abs(h) > hp | Abs(r) > rp)
     because it's implied by C(w,dhf)
   - renamed a as aown and g/4 as a
   - added precondition a > 0
*/