/**
* Copyright (c) Carnegie Mellon University. CONFIDENTIAL
* See LICENSE.txt for the conditions of this license.
*/

import edu.cmu.cs.ls.keymaerax.core.Variable
import edu.cmu.cs.ls.keymaerax.parser.KeYmaeraXParser
import org.scalatest.{BeforeAndAfterEach, Matchers, FlatSpec}
import edu.cmu.cs.ls.keymaerax.parser.StringConverter._
import edu.cmu.cs.ls.keymaerax.codegen.{CodeGenerationException, CGenerator}

/**
 * Created by ran on 6/22/15.
 * @author Ran Ji
 */
class CCodeGeneratorTests extends FlatSpec with Matchers {

  // terms

  "Numbers" should "compile floating point" in {
    CGenerator("2+1.5>3.25".asFormula) should be("/**************************\n * Generated by KeYmaera X\n **************************/\n\n" +
      "#include <math.h>\n#include <stdbool.h>\n\n" +
      "/* monitor */\nbool monitor () {\n  return (((2)) + ((1.5)))>((3.25));\n}\n\n")
  }

  it should "compile large number" in {
    CGenerator("9223372036854775807>1".asFormula) should be("/**************************\n * Generated by KeYmaera X\n **************************/\n\n" +
      "#include <math.h>\n#include <stdbool.h>\n\n" +
      "/* monitor */\nbool monitor () {\n  return ((9223372036854775807))>((1));\n}\n\n")
  }

  it should "throw exception for too large number" in {
    a [CodeGenerationException] should be thrownBy CGenerator("92233720368547758079>1".asFormula)
  }

  "variables" should "compile with index" in {
    CGenerator("x*z-y_1>1".asFormula, List(Variable("x"))) should be ("/**************************\n * Generated by KeYmaera X\n **************************/\n\n" +
      "#include <math.h>\n#include <stdbool.h>\n\n" +
      "/* function declaration */\nlong double z(); \nlong double y_1();\n\n" +
      "/* monitor */\nbool monitor (long double x) {\n  return (((x)*(z())) - (y_1()))>((1));\n}\n\n")
  }

  "power"  should "compile int exp" in {
    CGenerator("x^3>1".asFormula) should be ("/**************************\n * Generated by KeYmaera X\n **************************/\n\n" +
      "#include <math.h>\n#include <stdbool.h>\n\n" +
      "/* function declaration */\nlong double x();\n\n" +
      "/* monitor */\nbool monitor () {\n  return (((x())*(x())*(x())))>((1));\n}\n\n")
  }

  it should "compile neg int exp" in {
    CGenerator("(x+y)^-3>1".asFormula) should be("/**************************\n * Generated by KeYmaera X\n **************************/\n\n" +
      "#include <math.h>\n#include <stdbool.h>\n\n" +
      "/* function declaration */\nlong double x(); \nlong double y();\n\n" +
      "/* monitor */\nbool monitor () {\n  return ((1.0/(((x()) + (y()))*((x()) + (y()))*((x()) + (y())))))>((1));\n}\n\n")
  }

  it should "compile any exp" in {
    CGenerator("x()^y_0>1".asFormula) should be("/**************************\n * Generated by KeYmaera X\n **************************/\n\n" +
      "#include <math.h>\n#include <stdbool.h>\n\n" +
      "/* function declaration */\nlong double x(); \nlong double y_0();\n\n" +
      "/* monitor */\nbool monitor () {\n  return ((pow((x()),(y_0()))))>((1));\n}\n\n")
  }

  "abs" should "compile" in {
    CGenerator("abs(x-y)>0".asFormula) should be("/**************************\n * Generated by KeYmaera X\n **************************/\n\n" +
      "#include <math.h>\n#include <stdbool.h>\n\n" +
      "/* function declaration */\nlong double x(); \nlong double y();\n\n" +
      "/* monitor */\nbool monitor () {\n  return (fabsl((x()) - (y())))>((0));\n}\n\n")
  }

  // hacms case studies

  "robix" should "generate C code for passivesafety" in {
    val inputFile = getClass.getResourceAsStream("examples/casestudies/robix/passivesafety.mx")
    val monitorExp = KeYmaeraXParser(io.Source.fromInputStream(inputFile).mkString)
    CGenerator(monitorExp, List(Variable("a"),Variable("w"),Variable("r"),Variable("xo"),Variable("yo"),Variable("dxo"),Variable("dyo"),Variable("t"))) should be(
      "/**************************\n * Generated by KeYmaera X\n **************************/\n\n" +
      "#include <math.h>\n#include <stdbool.h>\n\n" +
      "/* function declaration */\nlong double v(); \nlong double apost_0(); \nlong double rpost_0(); \nlong double yopost_0(); \nlong double dyopost_0(); \nlong double wpost_0(); \n" +
      "long double xopost_0(); \nlong double dxopost_0(); \nlong double ep(); \nlong double V(); \nlong double A(); \nlong double y(); \nlong double x(); \nlong double B();\n\n" +
      "/* monitor */\nbool monitor (long double apost, long double w, long double wpost, long double r, long double rpost, long double xo, long double xopost, long double yo, " +
      "long double yopost, long double dxopost, long double dyopost, long double tpost) " +
      "{\n  return (((((dxopost_0())*(dxopost_0()))) + (((dyopost_0())*(dyopost_0()))))<=(((V())*(V()))))&&((((((((((apost)==(-(B())))&&((wpost)==(w)))&&((rpost)==(r)))&&((xopost)==(xo)))&&((yopost)==(yo)))&&" +
      "((dxopost)==(dxopost_0())))&&((dyopost)==(dyopost_0())))&&((tpost)==((0))))||((((v())==((0)))&&(((((((((apost)==((0)))&&" +
      "((wpost)==((0))))&&((rpost)==(r)))&&((xopost)==(xo)))&&((yopost)==(yo)))&&((dxopost)==(dxopost_0())))&&((dyopost)==(dyopost_0())))&&((tpost)==((0)))))||((((-(B()))<=(apost_0()))&&((apost_0())<=(A())))&&(((rpost_0())!=((0)))&&" +
      "((((wpost_0())*(rpost_0()))==(v()))&&(((((!(((x()) - (xopost_0()))>=((0))))||" +
      "(((x()) - (xopost_0()))>((((((v())*(v())))/(((2))*(B()))) + (((V())*(v()))/(B()))) + ((((A())/(B())) + ((1)))*((((A())/((2)))*(((ep())*(ep())))) + ((ep())*((v()) + (V()))))))))&&((!(((x()) - (xopost_0()))<=((0))))||" +
      "(((xopost_0()) - (x()))>((((((v())*(v())))/(((2))*(B()))) + (((V())*(v()))/(B()))) + ((((A())/(B())) + ((1)))*((((A())/((2)))*(((ep())*(ep())))) + ((ep())*((v()) + (V())))))))))||(((!(((y()) - (yopost_0()))>=((0))))||(((y()) - (yopost_0()))>((((((v())*(v())))/(((2))*(B()))) + (((V())*(v()))/(B()))) + ((((A())/(B())) + ((1)))*((((A())/((2)))*(((ep())*(ep())))) + ((ep())*((v()) + (V()))))))))&&" +
      "((!(((y()) - (yopost_0()))<=((0))))||(((yopost_0()) - (y()))>((((((v())*(v())))/(((2))*(B()))) + (((V())*(v()))/(B()))) + ((((A())/(B())) + ((1)))*((((A())/((2)))*(((ep())*(ep())))) + ((ep())*((v()) + (V()))))))))))&&(((((((((apost)==(apost_0()))&&((wpost)==(wpost_0())))&&" +
      "((rpost)==(rpost_0())))&&((xopost)==(xopost_0())))&&((yopost)==(yopost_0())))&&((dxopost)==(dxopost_0())))&&((dyopost)==(dyopost_0())))&&((tpost)==((0))))))))));\n}\n\n")
  }

  it should "generate C code for passivesafety_renamed" in {
    val inputFile = getClass.getResourceAsStream("examples/casestudies/robix/passivesafety_renamed.mx")
    val monitorExp = KeYmaeraXParser(io.Source.fromInputStream(inputFile).mkString)
    CGenerator(monitorExp, List(Variable("a"),Variable("om"),Variable("r"),Variable("xo"),Variable("yo"),Variable("dxo"),Variable("dyo"),Variable("t"))) should be(
      "/**************************\n * Generated by KeYmaera X\n **************************/\n\n" +
      "#include <math.h>\n#include <stdbool.h>\n\n" +
      "/* function declaration */\nlong double v(); \nlong double apost_0(); \nlong double rpost_0(); \nlong double yopost_0(); \nlong double dyopost_0(); \nlong double Vo(); \nlong double xopost_0(); \nlong double dxopost_0(); " +
      "\nlong double ep(); \nlong double A(); \nlong double ompost_0(); \nlong double y(); \nlong double x(); \nlong double B();\n\n" +
      "/* monitor */\nbool monitor (long double apost, long double om, long double ompost, long double r, long double rpost, long double xo, long double xopost, " +
      "long double yo, long double yopost, long double dxopost, long double dyopost, long double tpost) " +
      "{\n  return (((((dxopost_0())*(dxopost_0()))) + (((dyopost_0())*(dyopost_0()))))<=(((Vo())*(Vo()))))&&((((((((((apost)==(-(B())))&&((ompost)==(om)))&&((rpost)==(r)))&&((xopost)==(xo)))&&((yopost)==(yo)))&&" +
      "((dxopost)==(dxopost_0())))&&((dyopost)==(dyopost_0())))&&((tpost)==((0))))||((((v())==((0)))&&(((((((((apost)==((0)))&&((ompost)==((0))))&&((rpost)==(r)))&&((xopost)==(xo)))&&((yopost)==(yo)))&&" +
      "((dxopost)==(dxopost_0())))&&((dyopost)==(dyopost_0())))&&((tpost)==((0)))))||((((-(B()))<=(apost_0()))&&((apost_0())<=(A())))&&(((rpost_0())!=((0)))&&((((ompost_0())*(rpost_0()))==(v()))&&" +
      "(((((!(((x()) - (xopost_0()))>=((0))))||(((x()) - (xopost_0()))>((((((v())*(v())))/(((2))*(B()))) + (((Vo())*(v()))/(B()))) + ((((A())/(B())) + ((1)))*((((A())/((2)))*(((ep())*(ep())))) + ((ep())*((v()) + (Vo()))))))))&&" +
      "((!(((x()) - (xopost_0()))<=((0))))||(((xopost_0()) - (x()))>((((((v())*(v())))/(((2))*(B()))) + (((Vo())*(v()))/(B()))) + ((((A())/(B())) + ((1)))*((((A())/((2)))*(((ep())*(ep())))) + ((ep())*((v()) + (Vo())))))))))||" +
      "(((!(((y()) - (yopost_0()))>=((0))))||(((y()) - (yopost_0()))>((((((v())*(v())))/(((2))*(B()))) + (((Vo())*(v()))/(B()))) + ((((A())/(B())) + ((1)))*((((A())/((2)))*(((ep())*(ep())))) + ((ep())*((v()) + (Vo()))))))))&&" +
      "((!(((y()) - (yopost_0()))<=((0))))||(((yopost_0()) - (y()))>((((((v())*(v())))/(((2))*(B()))) + (((Vo())*(v()))/(B()))) + ((((A())/(B())) + ((1)))*((((A())/((2)))*(((ep())*(ep())))) + ((ep())*((v()) + (Vo()))))))))))&&" +
      "(((((((((apost)==(apost_0()))&&((ompost)==(ompost_0())))&&((rpost)==(rpost_0())))&&((xopost)==(xopost_0())))&&((yopost)==(yopost_0())))&&((dxopost)==(dxopost_0())))&&((dyopost)==(dyopost_0())))&&((tpost)==((0))))))))));\n}\n\n")
  }

  it should "generate C code for passivesafetyabs" in {
    val inputFile = getClass.getResourceAsStream("examples/casestudies/robix/passivesafetyabs.mx")
    val monitorExp = KeYmaeraXParser(io.Source.fromInputStream(inputFile).mkString)
    CGenerator(monitorExp, List(Variable("a"),Variable("w"),Variable("r"),Variable("xo"),Variable("yo"),Variable("dxo"),Variable("dyo"),Variable("t"))) should be(
      "/**************************\n * Generated by KeYmaera X\n **************************/\n\n" +
      "#include <math.h>\n#include <stdbool.h>\n\n" +
      "/* function declaration */\nlong double v(); \nlong double apost_0(); \nlong double rpost_0(); \nlong double yopost_0(); \nlong double dyopost_0(); \nlong double wpost_0(); \nlong double xopost_0(); \nlong double dxopost_0(); \nlong double ep(); \nlong double V(); \nlong double A(); \nlong double y(); \nlong double x(); \nlong double B();\n\n" +
      "/* monitor */\nbool monitor (long double apost, long double w, long double wpost, long double r, long double rpost, long double xo, long double xopost, long double yo, long double yopost, long double dxopost, long double dyopost, long double tpost) " +
      "{\n  return (((((dxopost_0())*(dxopost_0()))) + (((dyopost_0())*(dyopost_0()))))<=(((V())*(V()))))&&((((((((((apost)==(-(B())))&&((wpost)==(w)))&&((rpost)==(r)))&&((xopost)==(xo)))&&((yopost)==(yo)))&&((dxopost)==(dxopost_0())))&&((dyopost)==(dyopost_0())))&&((tpost)==((0))))||((((v())==((0)))&&(((((((((apost)==((0)))&&((wpost)==((0))))&&((rpost)==(r)))&&((xopost)==(xo)))&&((yopost)==(yo)))&&" +
      "((dxopost)==(dxopost_0())))&&((dyopost)==(dyopost_0())))&&((tpost)==((0)))))||((((-(B()))<=(apost_0()))&&((apost_0())<=(A())))&&(((rpost_0())!=((0)))&&((((wpost_0())*(rpost_0()))==(v()))&&((((fabsl((x()) - (xopost_0())))>((((((v())*(v())))/(((2))*(B()))) + (((V())*(v()))/(B()))) + ((((A())/(B())) + ((1)))*((((A())/((2)))*(((ep())*(ep())))) + ((ep())*((v()) + (V())))))))||" +
      "((fabsl((y()) - (yopost_0())))>((((((v())*(v())))/(((2))*(B()))) + (((V())*(v()))/(B()))) + ((((A())/(B())) + ((1)))*((((A())/((2)))*(((ep())*(ep())))) + ((ep())*((v()) + (V()))))))))&&(((((((((apost)==(apost_0()))&&((wpost)==(wpost_0())))&&((rpost)==(rpost_0())))&&((xopost)==(xopost_0())))&&((yopost)==(yopost_0())))&&((dxopost)==(dxopost_0())))&&((dyopost)==(dyopost_0())))&&((tpost)==((0))))))))));\n}\n\n")
  }

  it should "generate C code for passiveorientationsafety" in {
    val inputFile = getClass.getResourceAsStream("examples/casestudies/robix/passiveorientationsafety.mx")
    val monitorExp = KeYmaeraXParser(io.Source.fromInputStream(inputFile).mkString)
    CGenerator(monitorExp, List(Variable("a"),Variable("w"),Variable("dx"),Variable("dy"),Variable("r"),Variable("t"),Variable("ox"),Variable("oy"),Variable("odx"),Variable("ody"),Variable("isVisible"),Variable("talpha"))) should be(
      "/**************************\n * Generated by KeYmaera X\n **************************/\n\n" +
      "#include <math.h>\n#include <stdbool.h>\n\n" +
      "/* function declaration */\nlong double v(); \nlong double apost_0(); \nlong double rpost_0(); \nlong double isVisiblepost_0(); \nlong double wpost_0(); \nlong double odxpost_0(); \nlong double ep(); \nlong double alpha(); \nlong double V(); \nlong double A(); \nlong double b(); \n" +
      "long double oypost_0(); \nlong double y(); \nlong double odypost_0(); \nlong double oxpost_0(); \nlong double x();\n\n" +
      "/* monitor */\nbool monitor (long double apost, long double wpost, long double dx, long double dxpost, long double dy, long double dypost, long double r, long double rpost, long double tpost, long double ox, long double oxpost, long double oy, long double oypost, long double odxpost, long double odypost, long double isVisible, long double isVisiblepost, long double talpha, long double talphapost)" +
      " {\n  return (((((odxpost_0())*(odxpost_0()))) + (((odypost_0())*(odypost_0()))))<=(((V())*(V()))))&&(((((wpost_0())*(r))==(v()))&&(((((((((((((apost)==(-(b())))&&((wpost)==(wpost_0())))&&((dxpost)==(dx)))&&((dypost)==(dy)))&&((rpost)==(r)))&&((tpost)==((0))))&&((oxpost)==(ox)))&&((oypost)==(oy)))&&((odxpost)==(odxpost_0())))&&((odypost)==(odypost_0())))&&((isVisiblepost)==(isVisible)))&&((talphapost)==(talpha))))||((((v())==((0)))&&((((wpost_0())*(r))==(v()))&&(((((((((((((apost)==((0)))&&((wpost)==(wpost_0())))&&((dxpost)==(-(dx))))&&((dypost)==(-(dy))))&&((rpost)==(r)))&&((tpost)==((0))))&&((oxpost)==(ox)))&&((oypost)==(oy)))&&((odxpost)==(odxpost_0())))&&((odypost)==(odypost_0())))&&((isVisiblepost)==(isVisible)))&&((talphapost)==(talpha)))))||((((-(b()))<=(apost_0()))&&((apost_0())<=(A())))&&(((rpost_0())!=((0)))&&(((((v()) + ((apost_0())*(ep())))<((0)))&&((((isVisiblepost_0())<((0)))||" +
      "((((!(((x()) - (oxpost_0()))>=((0))))||(((x()) - (oxpost_0()))>(((((v())*(v())))/(((-2))*(apost_0()))) + ((V())*((v())/(-(apost_0())))))))&&" +
      "((!(((x()) - (oxpost_0()))<=((0))))||(((oxpost_0()) - (x()))>(((((v())*(v())))/(((-2))*(apost_0()))) + ((V())*((v())/(-(apost_0()))))))))||" +
      "(((!(((y()) - (oypost_0()))>=((0))))||(((y()) - (oypost_0()))>(((((v())*(v())))/(((-2))*(apost_0()))) + ((V())*((v())/(-(apost_0())))))))&&" +
      "((!(((y()) - (oypost_0()))<=((0))))||(((oypost_0()) - (y()))>(((((v())*(v())))/(((-2))*(apost_0()))) + ((V())*((v())/(-(apost_0()))))))))))&&" +
      "((((!((rpost_0())>=((0))))||(((((v())*(v())))/(((-2))*(apost_0())))<((alpha())*(rpost_0()))))&&" +
      "((!((rpost_0())<((0))))||(((((v())*(v())))/(((-2))*(apost_0())))<((-(alpha()))*(rpost_0())))))&&" +
      "((((wpost_0())*(rpost_0()))==(v()))&&(((((((((((((apost)==(apost_0()))&&((wpost)==(wpost_0())))&&((dxpost)==(dx)))&&((dypost)==(dy)))&&((rpost)==(rpost_0())))&&((tpost)==((0))))&&((oxpost)==(oxpost_0())))&&((oypost)==(oypost_0())))&&((odxpost)==(odxpost_0())))&&((odypost)==(odypost_0())))&&((isVisiblepost)==(isVisiblepost_0())))&&((talphapost)==((0))))))))||" +
      "((((v()) + ((apost_0())*(ep())))>=((0)))&&((((isVisiblepost_0())<((0)))||((((!(((x()) - (oxpost_0()))>=((0))))||(((x()) - (oxpost_0()))>((((((v())*(v())))/(((2))*(b()))) + ((V())*((v())/(b())))) + ((((apost_0())/(b())) + ((1)))*((((apost_0())/((2)))*(((ep())*(ep())))) + ((ep())*((v()) + (V()))))))))&&((!(((x()) - (oxpost_0()))<=((0))))||" +
      "(((oxpost_0()) - (x()))>((((((v())*(v())))/(((2))*(b()))) + ((V())*((v())/(b())))) + ((((apost_0())/(b())) + ((1)))*((((apost_0())/((2)))*(((ep())*(ep())))) + ((ep())*((v()) + (V())))))))))||(((!(((y()) - (oypost_0()))>=((0))))||(((y()) - (oypost_0()))>((((((v())*(v())))/(((2))*(b()))) + ((V())*((v())/(b())))) + ((((apost_0())/(b())) + ((1)))*((((apost_0())/((2)))*(((ep())*(ep())))) + ((ep())*((v()) + (V()))))))))&&" +
      "((!(((y()) - (oypost_0()))<=((0))))||(((oypost_0()) - (y()))>((((((v())*(v())))/(((2))*(b()))) + ((V())*((v())/(b())))) + ((((apost_0())/(b())) + ((1)))*((((apost_0())/((2)))*(((ep())*(ep())))) + ((ep())*((v()) + (V())))))))))))&&((((!((rpost_0())>=((0))))||((((((v())*(v())))/(((2))*(b()))) + ((((apost_0())/(b())) + ((1)))*((((apost_0())/((2)))*(((ep())*(ep())))) + ((ep())*(v())))))<((alpha())*(rpost_0()))))&&" +
      "((!((rpost_0())<((0))))||((((((v())*(v())))/(((2))*(b()))) + ((((apost_0())/(b())) + ((1)))*((((apost_0())/((2)))*(((ep())*(ep())))) + ((ep())*(v())))))<((-(alpha()))*(rpost_0())))))&&((((wpost_0())*(rpost_0()))==(v()))&&(((((((((((((apost)==(apost_0()))&&((wpost)==(wpost_0())))&&((dxpost)==(dx)))&&((dypost)==(dy)))&&((rpost)==(rpost_0())))&&((tpost)==((0))))&&((oxpost)==(oxpost_0())))&&((oypost)==(oypost_0())))&&((odxpost)==(odxpost_0())))&&((odypost)==(odypost_0())))&&((isVisiblepost)==(isVisiblepost_0())))&&((talphapost)==((0)))))))))))));\n}\n\n")
  }

  "quadcopter" should "generate C code for hybridquadrotor" in {
    val inputFile = getClass.getResourceAsStream("examples/casestudies/quadcopter/hybridquadrotor.mx")
    val monitorExp = KeYmaeraXParser(io.Source.fromInputStream(inputFile).mkString)
    CGenerator(monitorExp, List(Variable("href"))) should be(
      "/**************************\n * Generated by KeYmaera X\n **************************/\n\n" +
      "#include <math.h>\n#include <stdbool.h>\n\n" +
      "/* function declaration */\nlong double v(); \nlong double sqrkp(); \nlong double kp(); \nlong double kd(); \nlong double hrefpost_0(); \nlong double y(); \nlong double h();\n\n" +
      "/* monitor */\nbool monitor (long double hrefpost) " +
      "{\n  return ((((h())>=(hrefpost_0()))&&((hrefpost_0())>((0))))&&(((((((((((((kp())<((0)))&&((v())==((0))))&&((hrefpost_0())>=(h())))||" +
        "(((((kp())<((0)))&&((v())>((0))))&&((((((2))*(h()))*(kp())) + ((v())*((kd()) + (y()))))==((((2))*(hrefpost_0()))*(kp()))))&&(((h())*(y()))>(((h())*(kd())) + (((2))*(v()))))))||" +
        "(((((kp())<((0)))&&((v())<((0))))&&((((((2))*(hrefpost_0()))*(kp())) + ((v())*(y())))==(((((2))*(h()))*(kp())) + ((kd())*(v())))))&&(((((2))*(v())) + ((h())*((kd()) + (y()))))>((0)))))||" +
        "((((kp())>((0)))&&((v())==((0))))&&((hrefpost_0())==(h()))))||" +
        "((((kp())>((0)))&&((v())>((0))))&&(((((((((((2))*(h()))*(kp())) + ((v())*((kd()) + (y()))))==((((2))*(hrefpost_0()))*(kp())))&&(((h())*(y()))>(((h())*(kd())) + (((2))*(v())))))&&(((kd()) + (((2))*(sqrkp())))<=((0))))||" +
        "((((((((2))*(h()))*(kp())) + ((v())*((kd()) + (y()))))==((((2))*(hrefpost_0()))*(kp())))&&(((kd()) + (((2))*(sqrkp())))<((0))))&&(((((2))*(v())) + ((h())*((kd()) + (y()))))<((0)))))||" +
        "((((((((2))*(hrefpost_0()))*(kp())) + ((v())*(y())))==(((((2))*(h()))*(kp())) + ((kd())*(v()))))&&(((kd()) + (((2))*(sqrkp())))<((0))))&&(((((2))*(v())) + ((h())*((kd()) + (y()))))<((0)))))||" +
        "(((((((((2))*(h()))*(kp())) + ((v())*((kd()) + (y()))))==((((2))*(hrefpost_0()))*(kp())))&&((kd())>(((2))*(sqrkp()))))&&(((((2))*(v())) + ((h())*((kd()) + (y()))))>((0))))&&(((h())*(y()))>=(((h())*(kd())) + (((2))*(v()))))))))||" +
        "((((kp())>((0)))&&((v())<((0))))&&(((((((((((2))*(h()))*(kp())) + ((v())*((kd()) + (y()))))==((((2))*(hrefpost_0()))*(kp())))&&((kd())>(((2))*(sqrkp()))))&&(((h())*(y()))<(((h())*(kd())) + (((2))*(v())))))||((((((((2))*(hrefpost_0()))*(kp())) + ((v())*(y())))==(((((2))*(h()))*(kp())) + ((kd())*(v()))))&&((kd())>=(((2))*(sqrkp()))))&&(((h())*(y()))<(((h())*(kd())) + (((2))*(v()))))))||(((((((((2))*(hrefpost_0()))*(kp())) + ((v())*(y())))==(((((2))*(h()))*(kp())) + ((kd())*(v()))))&&" +
        "((kd())>(((2))*(sqrkp()))))&&(((((2))*(v())) + ((h())*((kd()) + (y()))))>((0))))&&(((h())*(y()))>=(((h())*(kd())) + (((2))*(v()))))))||" +
        "(((((((((2))*(hrefpost_0()))*(kp())) + ((v())*(y())))==(((((2))*(h()))*(kp())) + ((kd())*(v()))))&&(((h())*(y()))>(((h())*(kd())) + (((2))*(v())))))&&(((((2))*(v())) + ((h())*((kd()) + (y()))))>=((0))))&&" +
        "(((kd()) + (((2))*(sqrkp())))<((0)))))))&&(((((y())*(y())))==((((kd())*(kd()))) - (((4))*(kp()))))&&((y())>=((0)))))&&(((((sqrkp())*(sqrkp())))==(kp()))&&((sqrkp())>=((0)))))&&((((((((((h())*(h())))*(((kp())*(kp())))) - (((((2))*(h()))*(hrefpost_0()))*(((kp())*(kp()))))) + ((((hrefpost_0())*(hrefpost_0())))*(((kp())*(kp()))))) + ((((h())*(kd()))*(kp()))*(v()))) - ((((hrefpost_0())*(kd()))*(kp()))*(v()))) + ((kp())*(((v())*(v())))))!=((0))))||" +
        "((((((((((((((kp())<((0)))&&((v())==((0))))&&(((((h())*(y()))<=((h())*(kd())))||(((h())*((kd()) + (y())))<=((0))))||((h())>(hrefpost_0()))))||((((kp())<((0)))&&((v())<((0))))&&(((((h())*(y()))<=(((h())*(kd())) + (((2))*(v()))))||(((((2))*(v())) + ((h())*((kd()) + (y()))))<=((0))))||((((((2))*(h()))*(kp())) + ((kd())*(v())))!=(((((2))*(hrefpost_0()))*(kp())) + ((v())*(y())))))))||" +
        "((((kp())<((0)))&&((v())>((0))))&&(((((h())*(y()))<=(((h())*(kd())) + (((2))*(v()))))||(((((2))*(v())) + ((h())*((kd()) + (y()))))<=((0))))||((((((2))*(h()))*(kp())) + ((v())*((kd()) + (y()))))!=((((2))*(hrefpost_0()))*(kp()))))))||((((kp())>((0)))&&((v())==((0))))&&((((((((h())!=(hrefpost_0()))&&((((kd())>=(((2))*(sqrkp())))&&(((h())*(y()))>=((h())*(kd()))))||((((h())*((kd()) + (y())))>=((0)))&&(((kd()) + (((2))*(sqrkp())))<((0))))))||(((kd())==(((2))*(sqrkp())))&&(((h())*(y()))>=((h())*(kd())))))||(((kd())<(((2))*(sqrkp())))&&(((kd()) + (((2))*(sqrkp())))>((0)))))||" +
        "((h())>(hrefpost_0())))||(((kd())>(((2))*(sqrkp())))&&(((h())*((kd()) + (y())))<=((0)))))||((((kd()) + (((2))*(sqrkp())))<=((0)))&&(((h())*(y()))<=((h())*(kd())))))))||((((kp())>((0)))&&((v())<((0))))&&(((((((((((2))*(hrefpost_0()))*(kp())) + ((v())*(y())))!=(((((2))*(h()))*(kp())) + ((kd())*(v()))))&&((((h())*(y()))>=(((h())*(kd())) + (((2))*(v()))))||((kd())<=(((2))*(sqrkp())))))||" +
        "((kd())<(((2))*(sqrkp()))))||(((kd())>(((2))*(sqrkp())))&&(((((h())*(y()))<(((h())*(kd())) + (((2))*(v()))))&&(((((((((2))*(hrefpost_0()))*(kp())) + ((v())*(y())))<(((((2))*(h()))*(kp())) + ((kd())*(v()))))&&((((((2))*(h()))*(kp())) + ((v())*((kd()) + (y()))))<((((2))*(hrefpost_0()))*(kp()))))||((((((2))*(hrefpost_0()))*(kp())) + ((v())*(y())))>(((((2))*(h()))*(kp())) + ((kd())*(v())))))||((((((2))*(h()))*(kp())) + ((v())*((kd()) + (y()))))>((((2))*(hrefpost_0()))*(kp())))))||(((((2))*(v())) + ((h())*((kd()) + (y()))))<=((0))))))||" +
        "((((h())*(y()))>=(((h())*(kd())) + (((2))*(v()))))&&((kd())<=(((2))*(sqrkp())))))||(((kd()) + (((2))*(sqrkp())))<=((0))))))||((((kp())>((0)))&&((v())>((0))))&&(((((((((((2))*(h()))*(kp())) + ((v())*((kd()) + (y()))))!=((((2))*(hrefpost_0()))*(kp())))&&((((kd()) + (((2))*(sqrkp())))>=((0)))||(((((2))*(v())) + ((h())*((kd()) + (y()))))>=((0)))))||((kd())>=(((2))*(sqrkp()))))||(((((kd()) + (((2))*(sqrkp())))<((0)))&&(((((2))*(v())) + ((h())*((kd()) + (y()))))<((0))))&&((((((((2))*(hrefpost_0()))*(kp())) + ((v())*(y())))<(((((2))*(h()))*(kp())) + ((kd())*(v()))))||((((((2))*(h()))*(kp())) + ((v())*((kd()) + (y()))))<((((2))*(hrefpost_0()))*(kp()))))||" +
        "(((((((2))*(hrefpost_0()))*(kp())) + ((v())*(y())))>(((((2))*(h()))*(kp())) + ((kd())*(v()))))&&((((((2))*(h()))*(kp())) + ((v())*((kd()) + (y()))))>((((2))*(hrefpost_0()))*(kp())))))))||(((kd()) + (((2))*(sqrkp())))>((0))))||(((h())*(y()))<=(((h())*(kd())) + (((2))*(v())))))))&&((((y())*(y())))==((((kd())*(kd()))) - (((4))*(kp())))))&&((y())>=((0))))&&((((sqrkp())*(sqrkp())))==(kp())))&&((sqrkp())>=((0))))&&((((((((((h())*(h())))*(((kp())*(kp())))) - (((((2))*(h()))*(hrefpost_0()))*(((kp())*(kp()))))) + ((((hrefpost_0())*(hrefpost_0())))*(((kp())*(kp()))))) + ((((h())*(kd()))*(kp()))*(v()))) - ((((hrefpost_0())*(kd()))*(kp()))*(v()))) + ((kp())*(((v())*(v())))))==((0))))))&&((hrefpost)==(hrefpost_0()));\n}\n\n")
  }

}
