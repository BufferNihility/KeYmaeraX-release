Functions.
  R ep.   /* time limit for control decisions */
  R B.    /* minimum braking capability of the robot */
  R A.    /* maximum acceleration -B <= a <= A */
  R Vo().  /* maximum velocity of obstacles */
End.

ProgramVariables.
  R x.    /* robot position: x */
  R y.    /* robot position: y */
  R v.    /* robot translational velocity */
  R a.    /* robot translational acceleration */
  R dx.   /* robot orientation: x */
  R dy.   /* robot orientation: y */
  R om.    /* robot rotational velocity */
  R r.    /* radius of curve */
  R xo.   /* position summary of obstacles */
  R yo.
  R dxo.  /* direction and linear velocity of obstacles */
  R dyo.
  R t.    /* time */
End.

Problem.
    v >= 0
  & ( ( (x-xo >= 0 -> x-xo > v^2 / (2*B) + Vo()*(v/B))
      & (x-xo <= 0 -> xo-x > v^2 / (2*B) + Vo()*(v/B)))
    | ( (y-yo >= 0 -> y-yo > v^2 / (2*B) + Vo()*(v/B))
      & (y-yo <= 0 -> yo-y > v^2 / (2*B) + Vo()*(v/B))))
  & r != 0
  & dx^2 + dy^2 = 1
  & A >= 0
  & B > 0
  & Vo() >= 0
  & ep > 0
          -> [{
                {
                /* control obstacle */
          		  dxo :=*;
          			dyo :=*;
          			?dxo^2 + dyo^2 <= Vo()^2;

          			/* brake on current curve or remain stopped */
          			{
          			{a := -B; }
          		++{?v = 0; a := 0; om := 0; }
          			/* or choose a new safe curve */
    				  ++{a :=*; ?-B <= a & a <= A;

    					   r :=*; ?r != 0; /* do not spin */
    					   om :=*; ?om * r = v;

                 /* for the chosen a, om, cx, cy: worst case position of obstacles wrt. curve */
                 xo :=*;
                 yo :=*;

    					   /* use that curve, if it is a safe one (admissible velocities) */
    					   ? ( (x-xo >= 0 -> x-xo > v^2/(2*B) + Vo()*v/B + (A/B + 1) * (A/2 * ep^2 + ep*(v+Vo())))
    					     & (x-xo <= 0 -> xo-x > v^2/(2*B) + Vo()*v/B + (A/B + 1) * (A/2 * ep^2 + ep*(v+Vo()))))
    						 | ( (y-yo >= 0 -> y-yo > v^2/(2*B) + Vo()*v/B + (A/B + 1) * (A/2 * ep^2 + ep*(v+Vo())))
                   & (y-yo <= 0 -> yo-y > v^2/(2*B) + Vo()*v/B + (A/B + 1) * (A/2 * ep^2 + ep*(v+Vo()))));
    				    }
    				    };

    				    t := 0;
    				    }

    				    /* dynamics */
    				    { x' = v * dx, y' = v * dy, dx' = -om * dy, dy' = om * dx, v' = a, om' = a/r,
    						  xo' = dxo, yo' = dyo,
    						  t' = 1 & t <= ep & v >= 0 }

                /*@invariant(
                    t >= 0,
                    dx^2 + dy^2 = 1
                    v = v0 + a*t,
                    -t * (v - a/2*t) <= x - x0 & x - x0 <= t * (v - a/2*t),
                    -t * (v - a/2*t) <= y - y0 & y - y0 <= t * (v - a/2*t),
                    -t * Vo() <= xo - xo0 & xo - xo0 <= t * Vo(),
                    -t * Vo() <= yo - yo0 & yo - yo0 <= t * Vo()
                  )*/
    			    }* /*@invariant(v >= 0
                  & dx^2+dy^2 = 1
                  & r != 0
                  & (v = 0 | (  (x-xo >= 0 -> x-xo > v^2 / (2*B) + Vo()*v/B)
                              & (x-xo <= 0 -> xo-x > v^2 / (2*B) + Vo()*v/B))
                           | (  (y-yo >= 0 -> y-yo > v^2 / (2*B) + Vo()*v/B)
                              & (y-yo <= 0 -> yo-y > v^2 / (2*B) + Vo()*v/B)))
                )*/
    		] (v > 0 -> (x - xo)^2 + (y - yo)^2 > 0)
End.