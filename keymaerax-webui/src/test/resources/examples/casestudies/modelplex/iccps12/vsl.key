Functions.
  R B.
  R A.
  R ep.
End.

ProgramVariables.
  R x1.
  R v1.
  R a1.
  R t.
  R vsl.
  R xsl.
End.

Problem.
	    v1 >= 0
		& vsl >= 0
		& x1 <= xsl
		& 2*B*(xsl - x1) >= v1^2 - vsl^2
		& A >= 0
		& B > 0
		& ep > 0
 -> [	{
				/* control car */
				   {a1 := -B;}																				/* braking is always allowed */
				++ {?xsl >= x1 + (v1^2 - vsl^2) / (2*B) + (A/B + 1) * (A/2 * ep^2 + ep*v1); 	/* outside the speed limit do whatever you want, as long as you can still brake to meet the speed limit */
					  a1 :=*;  ?-B <= a1 & a1 <= A;}
				++ {?x1 >= xsl; a1 :=*; ?-B <= a1 & a1 <= A & a1 <= (v1 - vsl)/ep;}					/* comply with the speed limit by not accelerating too much */

				/* traffic center, keep previous or set a new speed limit */
				   {xsl := xsl; vsl := vsl;}
				++ {xsl :=*; vsl :=*; ?vsl >= 0 & xsl >= x1 + (v1^2 - vsl^2) / (2*B) + (A/B + 1) * (A/2 * ep^2 + ep*v1);}	/* if we set a speed limit, the car must be able to comply with it, no matter how hard it currently accelerates */

				t := 0;
				/* dynamics */
				{x1' = v1, v1' = a1, t' = 1 & v1 >= 0 & t <= ep}
			}*@invariant(v1 >= 0 & vsl >= 0 & (v1 <= vsl | xsl >= x1 + (v1^2 - vsl^2) / (2*B)))
		] (x1 >= xsl -> v1 <= vsl)
End.
