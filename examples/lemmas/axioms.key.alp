/*
 * KeYmaera Axioms
 * @author Nathan Fulton
 * @author Jan-David Quesel
 * @author Andre Platzer
 * 
 * Basic dL Axioms of Differential Dynamic Logic.
 * @see "Andre Platzer. The complete proof theory of hybrid systems. ACM/IEEE Symposium on Logic in Computer Science, LICS 2012, June 25â€“28, 2012, Dubrovnik, Croatia, pages 541-550. IEEE 2012."
 * @see "Andre Platzer. Dynamic logics of dynamical systems. arXiv 1205.4788, May 2012."
 */
Variables.
  T s.
  T t.
  P a.
  P b.
  F p.
  F H.
  F q.
End.

Axiom "[?] test".
  [?H]p <-> (H -> p).
End.

Axiom "<?> test".
  <?H>p <-> (H & p).
End.

Axiom "[++] choice".
  [a ++ b]p <-> ([a]p & [b]p).
End.

Axiom "<++> choice".
   <a ++ b>p <-> (<a>p | <b>p).
End.

Axiom "[;] compose".
  [ a; b ]p <-> [a][b]p.
End.

Axiom "<;> compose".
  < a; b >p <-> <a><b>p.
End.

Axiom "<*> unwind".
  <a*>p <-> (p | <a><a*> p).
End.

Axiom "[*] unwind".
  [a*]p <-> (p & [a][a*] p).
End.

Axiom "K modal modus ponens".
  [a](p->q) -> (([a]p) -> ([a]q))
End.

Axiom "I induction".
  (p & [a*](p -> [a] p)) -> [a*]p
End.

Axiom "B- Converse Barcan".
  ([a] \forall x. p(x)) -> \forall x. [a] p(x)
End.

/*
// \forall {a} quantifies over all variables written in a
// not sure if this can be an axiom or needs to be a built-in rule
// since it's hard to get this working with uniform substitution
Axiom "Generalize".
  \forall {a}. p -> [a] p
End.
*/

/*
Axiom "Forall-Quantifier Scope".
  (\forall x. (p(x) & q)) <-> ((\forall x. p(x)) & q)
End.
*/

Axiom "&' Derive and".
  (p & q)' <-> ((p') & (q'))
End.

Axiom "|' Derive or".
  (p | q)' <-> ((p') & (q'))
End.

Axiom "+' Derive sum".
  (s + t)' = (s') + (t')
End.

Axiom "-' Derive minus".
  (s - t)' = (s') - (t')
End.

Axiom "*' Derive product".
  (s * t)' = ((s')*t) + (s*(t'))
End.

Axiom "/' Derive quotient".
  (s / t)' = (((s')*t) - (s*(t'))) / (t^2)
End.

/*
Axiom "Derive Monomial".
	(x^n)' = n*x^(n-1)
End.
*/
